# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

# Might be needing this one
def get_nth_triangle_number(n):
    return (n ** 2 + n) / 2


# WARNING: without n itself, which is also a divisor
def get_nums_divisors(n):
    return [x + 1 for x in range(int(n / 2)) if n % (x + 1) == 0]


if __name__ == "__main__":
    num = 1
    while (len(get_nums_divisors(get_nth_triangle_number(num))) < 500):
        num += 1
    print(get_nth_triangle_number(num))
